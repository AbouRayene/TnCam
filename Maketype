SHELL		= /bin/sh

ifeq ($(wildcard oscam-boxkeys.np), oscam-boxkeys.np)
  KFLAG		= -DCS_WITH_BOXKEYS
endif

WITH_SSL=$(subst ",,$(filter-out \#define, $(shell grep '^\#define WITH_SSL' oscam-config.h)))
ifeq ($(WITH_SSL), WITH_SSL)
	LIB_SSL=-lssl
endif

LIB_PTHREAD = -lpthread
LIB_MATH = -lm

override STD_LIBS := $(LIB_PTHREAD) $(LIB_MATH)
override STD_DEFS := -D'CS_SVN_VERSION="$(SVN_REV)"'

# Compiler warnings
CC_WARN = -Winline -Wall -Wextra -fno-strict-aliasing

# Compiler optimizations
ifndef DEBUG
CC_OPTS = -O2
else
CC_OPTS = -O0 -ggdb
endif

CC = $(CROSS)gcc
AR = $(CROSS)ar
STRIP = $(CROSS)strip
RANLIB = $(CROSS)ranlib

# The compiler knows for what target it compiles, so use this information
TARGET = $(shell $(CC) -dumpmachine)$(EXTRA_TARGET)

# CROSS variable was never used or set in the times when DS_xxx
# variables ruled the world. So it fairly safe to assume that if
# it is set then no compatability with DS_CC, DS_AR, DS_ST and DS_RL
# is needed.
ifeq "$(CROSS)" ""
# Backwards compatability
ifdef TYP
override TARGET = $(TYP)
endif
# Backwards compatability. It was expected that when DS_CC,
# DS_AR, DS_ST and DS_RL were set they are used as CC, AR,
# STRIP and RANLIB
ifneq "$(DS_CC)" ""
override CC=$(DS_CC)
endif
ifneq "$(DS_AR)" ""
override AR=$(DS_AR)
endif
ifneq "$(DS_ST)" ""
override STRIP=$(DS_ST)
endif
ifneq "$(DS_RL)" ""
override RANLIB=$(DS_RL)
endif
endif

CFLAGS  = $(STD_DEFS) $(CC_WARN) $(CC_OPTS) $(DS_OPTS) $(KFLAG) $(DS_CFLAGS)
LDFLAGS = $(STD_DEFS) $(DS_OPTS) $(DS_LDFLAGS)
ARFLAGS = -rcsl
LIBS    = $(STD_LIBS) $(DS_LIBS) $(OS_LIBS) $(OS_PTLI) $(LIB_SSL)
export		CC AR STRIP RANLIB CFLAGS LDFLAGS ARFLAGS TARGET

# Process EXTRA_xxx variables
CC_WARN += $(EXTRA_CC_WARN)
CC_OPTS += $(EXTRA_CC_OPTS)

ifeq ($(wildcard csgbox), csgbox)
 VERX	= -gbx-$(subst ",,$(filter-out \#define GBXVERSION,$(shell grep GBXVERSION csgbox/gbox.h)))
endif

# Setup quiet build
Q =
SAY = @true
ifndef V
Q = @
NP = --no-print-directory
SAY = @echo
endif
export Q SAY

EXEFILE1	= Distribution/oscam-$(VER)$(VERX)-$(subst cygwin,cygwin.exe,$(TARGET))
EXEFILE2	= Distribution/list_smargo-$(VER)$(VERX)-$(subst cygwin,cygwin.exe,$(TARGET))

LIBDIR		= lib

ALGO_LIB = $(LIBDIR)/libminilzo-$(TARGET).a
ALGO_DEP = algo/minilzo.h
ALGO_OBJ = \
	$(ALGO_LIB)(algo/minilzo.o)

CSCRYPT_LIB = $(LIBDIR)/libcscrypt-$(TARGET).a
CSCRYPT_DEP = cscrypt/cscrypt.h cscrypt/des.h cscrypt/bn.h
CSCRYPT_OBJ = \
	$(CSCRYPT_LIB)(cscrypt/aes.o) \
	$(CSCRYPT_LIB)(cscrypt/bn_add.o) \
	$(CSCRYPT_LIB)(cscrypt/bn_asm.o) \
	$(CSCRYPT_LIB)(cscrypt/bn_ctx.o) \
	$(CSCRYPT_LIB)(cscrypt/bn_div.o) \
	$(CSCRYPT_LIB)(cscrypt/bn_exp.o) \
	$(CSCRYPT_LIB)(cscrypt/bn_lib.o) \
	$(CSCRYPT_LIB)(cscrypt/bn_mul.o) \
	$(CSCRYPT_LIB)(cscrypt/bn_print.o) \
	$(CSCRYPT_LIB)(cscrypt/bn_shift.o) \
	$(CSCRYPT_LIB)(cscrypt/bn_sqr.o) \
	$(CSCRYPT_LIB)(cscrypt/bn_word.o) \
	$(CSCRYPT_LIB)(cscrypt/crc32.o) \
	$(CSCRYPT_LIB)(cscrypt/des.o) \
	$(CSCRYPT_LIB)(cscrypt/i_cbc.o) \
	$(CSCRYPT_LIB)(cscrypt/i_ecb.o) \
	$(CSCRYPT_LIB)(cscrypt/i_skey.o) \
	$(CSCRYPT_LIB)(cscrypt/md5.o) \
	$(CSCRYPT_LIB)(cscrypt/mem.o) \
	$(CSCRYPT_LIB)(cscrypt/rc6.o) \
	$(CSCRYPT_LIB)(cscrypt/sha1.o)

CSCTAPI_LIB = $(LIBDIR)/libcsctapi-$(TARGET).a
CSCTAPI_DEP = csctapi/defines.h csctapi/atr.h
CSCTAPI_OBJ = \
	$(CSCTAPI_LIB)(csctapi/atr.o) \
	$(CSCTAPI_LIB)(csctapi/icc_async.o) \
	$(CSCTAPI_LIB)(csctapi/ifd_cool.o) \
	$(CSCTAPI_LIB)(csctapi/ifd_mp35.o) \
	$(CSCTAPI_LIB)(csctapi/ifd_pcsc.o) \
	$(CSCTAPI_LIB)(csctapi/ifd_phoenix.o) \
	$(CSCTAPI_LIB)(csctapi/ifd_sc8in1.o) \
	$(CSCTAPI_LIB)(csctapi/ifd_sci.o) \
	$(CSCTAPI_LIB)(csctapi/ifd_smargo.o) \
	$(CSCTAPI_LIB)(csctapi/ifd_smartreader.o) \
	$(CSCTAPI_LIB)(csctapi/io_serial.o) \
	$(CSCTAPI_LIB)(csctapi/protocol_t0.o) \
	$(CSCTAPI_LIB)(csctapi/protocol_t1.o) \
	$(CSCTAPI_LIB)(csctapi/t1_block.o)

OSCAM_LIB = $(LIBDIR)/libcs-$(TARGET).a
OSCAM_DEP = globals.h oscam-config.h
OSCAM_OBJ = \
	$(OSCAM_LIB)(module-camd33.o) \
	$(OSCAM_LIB)(module-camd35.o) \
	$(OSCAM_LIB)(module-cccam.o) \
	$(OSCAM_LIB)(module-cccshare.o) \
	$(OSCAM_LIB)(module-constcw.o) \
	$(OSCAM_LIB)(module-coolapi.o)\
	$(OSCAM_LIB)(module-csp.o) \
	$(OSCAM_LIB)(module-datastruct-llist.o) \
	$(OSCAM_LIB)(module-dvbapi.o) \
	$(OSCAM_LIB)(module-gbox.o) \
	$(OSCAM_LIB)(module-lcd.o) \
	$(OSCAM_LIB)(module-monitor.o) \
	$(OSCAM_LIB)(module-newcamd.o) \
	$(OSCAM_LIB)(module-pandora.o) \
	$(OSCAM_LIB)(module-pandora.o) \
	$(OSCAM_LIB)(module-radegast.o) \
	$(OSCAM_LIB)(module-serial.o) \
	$(OSCAM_LIB)(module-stat.o) \
	$(OSCAM_LIB)(oscam-ac.o) \
	$(OSCAM_LIB)(oscam-chk.o) \
	$(OSCAM_LIB)(oscam-config.o) \
	$(OSCAM_LIB)(oscam-garbage.o) \
	$(OSCAM_LIB)(oscam-http-helpers.o) \
	$(OSCAM_LIB)(oscam-http.o) \
	$(OSCAM_LIB)(oscam-log.o) \
	$(OSCAM_LIB)(oscam-reader.o) \
	$(OSCAM_LIB)(oscam-simples.o) \
	$(OSCAM_LIB)(reader-bulcrypt.o) \
	$(OSCAM_LIB)(reader-common.o) \
	$(OSCAM_LIB)(reader-conax.o) \
	$(OSCAM_LIB)(reader-cryptoworks.o) \
	$(OSCAM_LIB)(reader-dre.o) \
	$(OSCAM_LIB)(reader-irdeto.o) \
	$(OSCAM_LIB)(reader-nagra.o) \
	$(OSCAM_LIB)(reader-nds.o) \
	$(OSCAM_LIB)(reader-seca.o) \
	$(OSCAM_LIB)(reader-tongfang.o) \
	$(OSCAM_LIB)(reader-viaccess.o) \
	$(OSCAM_LIB)(reader-videoguard-common.o) \
	$(OSCAM_LIB)(reader-videoguard1.o) \
	$(OSCAM_LIB)(reader-videoguard12.o) \
	$(OSCAM_LIB)(reader-videoguard2.o)

ifneq ($(LIBUSB),)
all:		prepare $(EXEFILE1) $(EXEFILE2)
else
all:		prepare $(EXEFILE1)
endif

prepare:
		@-echo "-----------------------------------------------------"
		@-echo "Build for platform $(TARGET)"
		@-echo "-----------------------------------------------------"
		@echo "$(TARGET)" | awk -F- ' \
		  { \
		    printf("#define CS_OSTYPE \"%s\"\n", $$0);  \
		    printf("#define CS_OS_CPU \"%s\"\n", $$1);  \
		    printf("#define CS_OS_HW  \"%s\"\n", $$2);  \
		    printf("#define CS_OS_SYS \"%s\"\n", $$3);  \
		  }' > oscam-ostype.h
		@[ -d "$(LIBDIR)" ] || mkdir "$(LIBDIR)"
ifeq ($(wildcard csgbox), csgbox)
	@-echo "#define CS_WITH_GBOX 1" >> oscam-ostype.h
	$(SAY) "MAKE	csgbox"
	$(MAKE) $(NP) -C csgbox
endif

$(ALGO_OBJ): $(ALGO_DEP)
$(ALGO_LIB): $(ALGO_OBJ)
	-@$(RANLIB) $@

$(CSCRYPT_OBJ): $(CSCRYPT_DEP)
$(CSCRYPT_LIB): $(CSCRYPT_OBJ)
	-@$(RANLIB) $@

$(CSCTAPI_OBJ): $(CSCTAPI_DEP)
$(CSCTAPI_LIB): $(CSCTAPI_OBJ)
	-@$(RANLIB) $@

$(OSCAM_OBJ): $(OSCAM_DEP)
$(OSCAM_LIB): $(OSCAM_OBJ)
	-@$(RANLIB) $@

$(EXEFILE1): oscam.c $(ALGO_LIB) $(CSCRYPT_LIB) $(CSCTAPI_LIB) $(OSCAM_LIB)
	$(SAY) "LINK	$@"
	$(Q)$(CC) $(LDFLAGS) $(LIBS) oscam.c $(OSCAM_LIB) $(ALGO_LIB) $(CSCRYPT_LIB) $(CSCTAPI_LIB) $(LIBUSB) $(LIBPCSC) $(LIBRT) -o $@
ifndef DEBUG
ifdef DS_ST
	$(SAY) "STRIP	$@"
	$(Q)$(STRIP) $@
endif
endif

$(EXEFILE2):	utils/list_smargo.c
	$(SAY) "LINK	$@"
	$(Q)$(CC) $(LDFLAGS) $(LIBS) utils/list_smargo.c $(LIBUSB) $(LIBRT) -o $@
ifndef DEBUG
	$(SAY) "STRIP	$@"
	$(Q)$(STRIP) $@
endif

.c.a:
	$(SAY) "CC	$<"
	$(Q)$(CC) $(CFLAGS) -c $< -o $(subst .c,.o,$<)
	@$(AR) $(ARFLAGS) $@ $*.o
	-@rm -f $*.o

.SUFFIXES:	.o .c .a
